welp =def= ⌊unit⌋.
welp2 =def= ⌊unit⌋.

Operator mine : (1).
hmmm =def= ⌊mine(x.x)⌋.

Theorem test1 : ⌊Σ(unit; _. Σ(unit; _. unit))⌋ {
  *{ intro ; auto }.
}.

||| Lemmas defined earlier in the development may be used later on using the 'lemma' tactic.
Theorem test1' : ⌊Σ(unit; _. Σ(unit; _. unit))⌋ {
  lemma 〈test1〉.
}.

||| Abstractions may be unfolded using the 'unfold' tactic.
Theorem test2 : ⌊Π(unit; _. Σ(unit; _. welp))⌋ {
  unfold 〈welp〉; auto
}.

Theorem test3 : ⌊∈(λ(x. x); Π(unit; _. unit))⌋ {
  auto.
}.

Theorem test4 : ⌊∈(λ(x.pair(x;x)); Π(void;_.void))⌋ {
  auto.
}.

Theorem test5 : ⌊Π(void; _. Σ(unit; _.unit))⌋ {
  auto.
}.

Theorem test6 : ⌊Π(unit; _. Σ(unit; _.unit))⌋ {
  witness ⌊λ(x. pair(x;x))⌋; auto.
}.

Theorem test7 : ⌊Π(Σ(void;_.unit); z. void)⌋ {
  auto;
  elim 〈z〉;
  auto.
}.

Theorem axiom-of-choice : ⌊∀(U〈0〉; A. ∀(U〈0〉; B. ∀(Π(A; _. Π(B; _. U〈0〉)); Q. Π(Π(A; a. Σ(B; b. ap(ap(Q;a);b))); φ. Σ(Π(A; _.B); f. Π(A; a. ap(ap(Q;a);ap(f;a))))))))⌋ {
  auto; intro ⌊λ(w. spread(ap(φ;w); x.y.x))⌋; auto;
  elim 〈φ〉 ⌊a⌋; auto;
  hyp-subst ← 〈z〉 ⌊z. ap(ap(Q;a); spread(z; x.y.x))⌋; auto;
  elim 〈y〉; auto.
}.
