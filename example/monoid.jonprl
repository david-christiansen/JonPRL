Operator MonoidSig : ().
Operator car : (0).
Operator ze : (0).
Operator op : (0;0;0).
Operator LeftUnit : (0).
Operator RightUnit : (0).

[MonoidSig] =def= ⌊Σ(U〈0〉; A. Σ(A; zero. Π(A; m. Π(A; n. A))))⌋.
[car(M)] =def= [spread(M; x.y.x)].
[ze(M)] =def= [spread(spread(M; x.y.y); x.y.x)].
[op(M;X;Y)] =def= ⌊ap(ap(spread(spread(M; x.y.y); x.y.y);X);Y)⌋.
[LeftUnit(M)] =def= [∀(car(M); m. =(m; op(M; ze(M); m); car(M)))].
[RightUnit(M)] =def= [∀(car(M); m. =(op(M; ze(M); m); m; car(M)))].

Tactic monoid-unfold {
  unfold 〈MonoidSig〉; unfold 〈car〉; unfold 〈op〉; unfold 〈ze〉.
}.

Theorem MonoidSig-wf : ⌊∈(MonoidSig; U〈1〉)⌋ {
  refine <monoid-unfold>; auto.
}.


Theorem car-wf : ⌊∀(MonoidSig; M. ∈(car(M); U〈0〉))⌋ {
  refine 〈monoid-unfold〉; auto;
  elim 〈M〉; auto.
}.

Theorem LeftUnit-wf : ⌊∀(MonoidSig; M. ∈(LeftUnit(M); U〈0〉))⌋ {
  unfold 〈LeftUnit〉; refine <monoid-unfold>; auto.
}.

Theorem RightUnit-wf : ⌊∀(MonoidSig; M. ∈(RightUnit(M);U〈0〉))⌋ {
  unfold 〈RightUnit〉; refine 〈monoid-unfold〉; auto.
}.

Theorem UnitMonoidStruct : ⌊MonoidSig⌋ {
  unfold 〈MonoidSig〉;
  intro ⌊unit⌋; auto;
  intro ⌊<>⌋ ; auto.
}.

Theorem UnitMonoid-LeftUnit : ⌊LeftUnit(UnitMonoidStruct)⌋ {
  unfold 〈UnitMonoidStruct〉; unfold 〈LeftUnit〉; refine 〈monoid-unfold〉; auto;
  elim 〈m〉; auto.
}.

Theorem UnitMonoid-RightUnit : ⌊RightUnit(UnitMonoidStruct)⌋ {
  unfold 〈UnitMonoidStruct〉; unfold 〈RightUnit〉; refine 〈monoid-unfold〉; auto;
  elim 〈m〉; auto.
}.

