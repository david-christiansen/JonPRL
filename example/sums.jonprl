Operator equiv : (0; 0).
[equiv(A; B)] =def= [Σ(Π(A; _.B); _. Π(B; _.A))].

||| Try the first introduction rule and if we can't
||| immediately solve the goal backtrack and try the
||| next.
Tactic constructor {
   (!{intro #0; auto} | !{intro #1; auto})
}.

Theorem commutative :
        [∀(U<0>; A.
         ∀(U<0>; B.
         equiv(+(A; B); +(B; A))))] {
  unfold <equiv>; auto; elim #3; refine <constructor>
}.

Theorem plus-assoc :
        [∀(U<0>; A.
         ∀(U<0>; B.
         ∀(U<0>; C.
         equiv(+(A; +(B; C)); +(+(A; B); C)))))] {
  unfold <equiv>; auto; elim #4;
  [id; id, elim #5, elim #5, intro #1; intro #1];
  auto;
  [intro #0, intro #0, id, id, intro #1];
  refine <constructor>
}.

Theorem void-idr :
        [∀(U<0>; A.
           equiv(+(A; void); A))] {
  unfold <equiv>; auto; [elim #2, intro #0]; auto.
}.

Theorem void-idl :
        [∀(U<0>; A.
           equiv(+(void; A); A))] {
  unfold <equiv>; auto; [elim #2, intro #1]; auto.
}.
