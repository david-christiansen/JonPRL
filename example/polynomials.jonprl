Operator Bundle : (0).

[Bundle(B)] =def= [Σ(U<0>; Dom. Π(Dom; _. B))].

Operator fst : (0).
[fst(p)] =def= [spread(p; x.y.x)].

Operator snd : (0).
[snd(p)] =def= [spread(p; x.y.y)].

Operator dom : (0).
[dom(f)] =def= [fst(f)].

Operator map : (0;0).
[map(f;b)] =def= [ap(snd(f); b)].

Theorem Bundle_wf : [∀(U<0>; B. ∈(Bundle(B); U<1>))] {
  unfold <Bundle>; auto
}.

Theorem dom_wf : [∀(U<0>; B. ∀(Bundle(B); f. ∈(dom(f); U<0>)))] {
  unfold <Bundle map dom fst>; auto
}.

Theorem map_wf : [
  ∀(U<0>; B. ∀(Bundle(B); f. ∀(dom(f); x. ∈(map(f;x); B))))
] {
  unfold <Bundle dom map fst snd>; auto.
}.

Operator Fiber : (0;0;0).
[Fiber(B; f; b)] =def= [Σ(dom(f); x. =(b; map(f;x); B))].

Theorem Fiber_wf : [
  ∀(U<0>; B. ∀(Bundle(B); f. ∀(B; b. ∈(Fiber(B; f;b); U<0>))))
] {
  unfold <Bundle Fiber dom map fst snd>; auto.
}.

Operator Polynomial : ().
[Polynomial] =def= [Σ(U<0>; Base. Bundle(Base))].

Theorem Polynomial_wf : [∈(Polynomial; U<1>)] {
  unfold <Polynomial Bundle>; auto
}.

Operator base : (0).
[base(E)] =def= [fst(E)].

Operator bundle : (0).
[bundle(E)] =def= [snd(E)].

Operator Yoneda : (0).
[Yoneda(B)] =def= [λ(A. Π(A; _. B))].

Theorem Yoneda_wf : [
  ∀(U<0>; B. ∀(U<0>; X. ∈(ap(Yoneda(B); X); U<0>)))
] {
  unfold <Yoneda>; auto.
}.

Operator Ext : (0;0).
[Ext(E;X)] =def= [Σ(base(E); b. ap(Yoneda(X); Fiber(base(E); bundle(E); b)))].

Theorem Ext_wf : [
  ∀(Polynomial; E. ∀(U<0>; X. ∈(Ext(E;X); U<1>)))
] {
  unfold <Polynomial Ext Bundle base Yoneda Fiber bundle dom map fst snd>; auto;
  unfold <snd>; auto
}.

Operator Pullback : (0;0;0).
[Pullback(B; f; g)] =def= [Σ(dom(f); x. Fiber(B; g; map(f;x)))].

Theorem Pullback_wf : [
  ∀(U<0>; B. ∀(Bundle(B); f. ∀(Bundle(B); g.
    ∈(Pullback(B; f; g); U<0>))))
] {
  unfold <Pullback Bundle Fiber map dom fst snd>; auto
}.
