Operator fst : (0).
Operator snd : (0).

[fst(p)] =def= [spread(p; x.y.x)].
[snd(p)] =def= [spread(p; x.y.y)].

||| Ambient category

Operator CTT : (0;0).
Operator Paths : (0;0;0).

[CTT(A;B)] =def= [Π(A; _. B)].
[Paths(A;x;y)] =def= [=(x;y;A)].

||| Power / Copower

Operator Power : (0;0).
Operator Copower : (0;0).

[Power(A;B)] =def= [Π(A; _. B)].
[Copower(A;B)] =def= [Σ(A; _. B)].

||| End / Coend

Operator End : (0;0).
Operator Coend : (0;0).

[End(U;Hom)] =def= [Π(U; A. ap(ap(Hom; A); A))].
[Coend(U;Hom)] =def= [Σ(U; A. ap(ap(Hom; A); A))].

Tactic autoR {
  reduce; *{(intro | eq-cd); reduce}
}.

Theorem End_wf : [
  ∀(U<0>; U. ∀(Π(U; _. Π(U; _. U<0>)); Hom.
    ∈(End(U;Hom); U<0>)))
] {
  unfold <End>; auto.
}.
Theorem Coend_wf : [
  ∀(U<0>; U. ∀(Π(U; _. Π(U; _. U<0>)); Hom.
    ∈(Coend(U;Hom); U<0>)))
] {
  unfold <Coend>; auto.
}.

||| Ran / Lan

Operator Ran : (0;0;0;0;0).
Operator Lan : (0;0;0;0;0).

[Ran(E;B;f;φ;b)] =def= [End(E; λ(X. λ(Y. Power(Paths(B; b; ap(f;X)); ap(φ;Y)))))].
[Lan(E;B;f;φ;b)] =def= [Coend(E; λ(X. λ(Y. Copower(Paths(B; ap(f;X); b); ap(φ;Y)))))].

Theorem Ran_wf : [
  ∀(U<0>; E. ∀(U<0>; B. ∀(Π(E; _. B); f. ∀(Π(E; _. U<0>); φ. ∀(B; b.
    ∈(Ran(E;B;f;φ;b); U<0>))))))
] {
  unfold <Ran Power End Paths>; refine <autoR>.
}.
Theorem Lan_wf : [
  ∀(U<0>; E. ∀(U<0>; B. ∀(Π(E; _. B); f. ∀(Π(E; _. U<0>); φ. ∀(B; b.
    ∈(Lan(E;B;f;φ;b); U<0>))))))
] {
  unfold <Lan Copower Coend Paths>; refine <autoR>.
}.

||| Fam

Operator Fam : (0).
Operator dom : (0).
Operator map : (0;0).

[Fam(B)] =def= [Σ(U<0>; Dom. Π(Dom; _. B))].
[dom(f)] =def= [fst(f)].
[map(f;b)] =def= [ap(snd(f); b)].

Theorem Fam_wf : [∀(U<0>; B. ∈(Fam(B); U<1>))] {
  unfold <Fam>; auto
}.
Theorem dom_wf : [∀(U<0>; B. ∀(Fam(B); f. ∈(dom(f); U<0>)))] {
  unfold <Fam map dom fst>; auto
}.
Theorem map_wf : [
  ∀(U<0>; B. ∀(Fam(B); f. ∀(dom(f); x. ∈(map(f;x); B))))
] {
  unfold <Fam dom map fst snd>; refine <autoR>.
}.

||| Fibers of a bundle over a point

Operator Fiber : (0;0;0).

[Fiber(B; f; b)] =def= [Σ(dom(f); x. =(b; map(f;x); B))].

Theorem Fiber_wf : [
  ∀(U<0>; B. ∀(Fam(B); f. ∀(B; b. ∈(Fiber(B;f;b); U<0>))))
] {
  unfold <Fam Fiber dom map fst snd>; refine <autoR>.
}.

||| Quantifier adjoints

Operator Exists : (0;0;0).
Operator Invert : (0).
Operator Forall : (0;0;0).

||| Exists ⊣ Invert ⊣ Forall

[Exists(X;Y;f)] =def= [λ(φ. λ(y. Lan(X;Y;f;φ;y)))].
[Invert(f)] =def= [λ(φ. λ(x. ap(φ;ap(f;x))))].
[Forall(X;Y;f)] =def= [λ(φ. λ(y. Ran(X;Y;f;φ;y)))].

Theorem Exists_wf : [
  ∀(U<0>; X. ∀(U<0>; Y. ∀(Π(X; _. Y); f. ∀(Π(X; _. U<0>); φ.
    ∈(ap(Exists(X;Y;f);φ); Π(Y; _. U<0>))))))
] {
  unfold <Exists Lan Coend Copower Paths>; refine <autoR>.
}.
Theorem Invert_wf : [
  ∀(U<0>; X. ∀(U<0>; Y. ∀(Π(X; _. Y); f. ∀(Π(Y; _. U<0>); φ.
    ∈(ap(Invert(f);φ); Π(X; _. U<0>))))))
] {
  unfold <Invert>; refine <autoR>.
}.
Theorem Forall_wf : [
  ∀(U<0>; X. ∀(U<0>; Y. ∀(Π(X; _. Y); f. ∀(Π(X; _. U<0>); φ.
    ∈(ap(Forall(X;Y;f);φ); Π(Y; _. U<0>))))))
] {
  unfold <Forall Ran End Power Paths>; refine <autoR>
}.

||| Examples

Operator δ : ().
Operator Θ : (0;0).

||| diagonal
[δ] =def= [λ(x.pair(x; x))].

||| equality from left adjoint to substitution
[Θ(X;p)] =def= [ap(ap(Exists(X;Σ(X;_.X); δ); λ(_. unit)); p)].

||| <> = <> ∈ unit
Theorem eq_unit_unit : [Θ(unit; pair(<>; <>))] {
  unfold <Θ δ Exists Lan Coend Copower Paths>; refine <autoR>;
  intro [<>]; auto.
}.

||| Polynomials (non-indexed)

Operator Polynomial : ().
Operator base : (0).
Operator fam : (0).

[Polynomial] =def= [Σ(U<0>; Base. Fam(Base))].
[base(E)] =def= [fst(E)].
[fam(E)] =def= [snd(E)].

Theorem Polynomial_wf : [∈(Polynomial; U<1>)] {
  unfold <Polynomial Fam>; auto
}.

||| Yoneda embedding

Operator Embed : (0).

[Embed(B)] =def= [λ(A. CTT(A;B))].

Theorem Embed_wf : [
  ∀(U<0>; B. ∀(U<0>; X. ∈(ap(Embed(B); X); U<0>)))
] {
  unfold <Embed CTT>; refine <autoR>.
}.

||| Extension functors of polynomials

Operator Ext : (0;0).

[Ext(p;X)] =def= [Σ(base(p); b. ap(Embed(X); Fiber(base(p); fam(p); b)))].

Theorem Ext_wf : [
  ∀(Polynomial; p. ∀(U<0>; X. ∈(Ext(p;X); U<1>)))
] {
  unfold <Polynomial Ext Fam base Embed CTT Fiber fam dom map fst snd>; refine <autoR>;
  unfold <snd>; refine <autoR>
}.

||| Fam pullbacks

Operator Pullback : (0;0;0).

[Pullback(B;f;g)] =def= [Σ(dom(f); x. Fiber(B; g; map(f;x)))].

Theorem Pullback_wf : [
  ∀(U<0>; B. ∀(Fam(B); f. ∀(Fam(B); g.
    ∈(Pullback(B;f;g); U<0>))))
] {
  unfold <Pullback Fam Fiber map dom fst snd>; refine <autoR>.
}.
